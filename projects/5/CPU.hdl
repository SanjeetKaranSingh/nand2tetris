// This file is part of www.nand2tetris.org
// and the book "The Elements of Computing Systems"
// by Nisan and Schocken, MIT Press.
// File name: projects/5/CPU.hdl
/**
 * The Hack Central Processing unit (CPU).
 * Parses the binary code in the instruction input and executes it according to the
 * Hack machine language specification. In the case of a C-instruction, computes the
 * function specified by the instruction. If the instruction specifies to read a memory
 * value, the inM input is expected to contain this value. If the instruction specifies
 * to write a value to the memory, sets the outM output to this value, sets the addressM
 * output to the target address, and asserts the writeM output (when writeM = 0, any
 * value may appear in outM).
 * If the reset input is 0, computes the address of the next instruction and sets the
 * pc output to that value. If the reset input is 1, sets pc to 0.
 * Note: The outM and writeM outputs are combinational: they are affected by the
 * instruction's execution during the current cycle. The addressM and pc outputs are
 * clocked: although they are affected by the instruction's execution, they commit to
 * their new values only in the next cycle.
 */
CHIP CPU {

    IN  inM[16],         // M value input  (M = contents of RAM[A])
        instruction[16], // Instruction for execution
        reset;           // Signals whether to re-start the current
                         // program (reset==1) or continue executing
                         // the current program (reset==0).

    OUT outM[16],        // M value output
        writeM,          // Write to M? 
        addressM[15],    // Address in data memory (of M)
        pc[15];          // address of next instruction

    PARTS:
    // Loading to A-Register
    Mux16(a=instruction, b=aluOut, sel=instruction[15], out=aMuxOut);

    Not(in=instruction[15], out=notIn15);

    Or(a=notIn15, b=instruction[5], out=orIn15In5);
    ARegister(in=aMuxOut, load=orIn15In5, out=aout, out[0..14]=addressM);

    Mux16(a=aout, b=inM, sel=instruction[12], out=yout);


    ALU(x=dout, y=yout,  zx=instruction[11], nx=instruction[10], zy=instruction[9], ny=instruction[8], f=instruction[7], no=instruction[6], out= outM, out=aluOut, zr=eq0, ng=lt0);

    And(a=instruction[15], b=instruction[3], out=writeM);
    And(a=instruction[15],b=instruction[4],out=loadd);
    DRegister(in=aluOut, load=loadd, out=dout);

    Not(in=lt0, out=gte0);
    Not(in=eq0, out=ne0);
    And(a=gte0, b=ne0, out=gt0);
    Or(a=lt0, b=eq0, out=lte0);
    Mux8Way16(a=false, b[0]=gt0, c[0]=eq0, d[0]=gte0, e[0]=lt0, f[0]=ne0, g[0]=lte0, h=true, sel=instruction[0..2], out[0]=shouldjmp);
    And(a=instruction[15],b=shouldjmp,out=shouldjmp2);
    PC(in=aout, load=shouldjmp2, inc=true, reset=reset, out[0..14]=pc);
}